<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="PEDMINV0000">

<typeAlias alias="resultClass"	type="lcn.module.common.util.HashBox" />
<typeAlias alias="paramClass"	type="lcn.module.common.util.HashBox" />
<typeAlias alias="pedminv0000" type="com.lottemart.epc.edi.inventory.model.PEDMINV0000VO" />


 
<resultMap id="pedminv0000StoreMap"    class="pedminv0000">
	      <result property="strCd"             	column="STR_CD" />
          <result property="strNm"              column="STR_NM" />	
          <result property="buySaleAmt"         column="BUY_SALE_AMT" />
          <result property="rtnSaleAmt"         column="RTN_SALE_AMT" />
          <result property="strioSaleAmt"       column="STRIO_SALE_AMT" />
          <result property="salePrcUpdownAmt"   column="SALE_PRC_UPDOWN_AMT" />
          <result property="saleSaleAmt"        column="SALE_SALE_AMT" />
          <result property="buyQty"             column="BUY_QTY" />
          <result property="rtnQty"             column="RTN_QTY" />
          <result property="strioQty"           column="STRIO_QTY" />
          <result property="saleQty"            column="SALE_QTY" />
          <result property="stkAdjSaleAmt"      column="STK_ADJ_SALE_AMT" />
          <result property="stkAdjQty"          column="STK_ADJ_QTY" />
          <result property="bookFwdSale"        column="BOOK_FWD_SALE" />
          <result property="bookFwdQty"         column="BOOK_FWD_QTY" />
</resultMap>

<!-- 현재고(점포) -->
<select id="TSC_STORE-SELECT01" parameterClass="map" resultMap="pedminv0000StoreMap">
	/* PEDMINV0000.TSC_STORE-SELECT01*/
	SELECT	/*+ORDERED USE_HASH(MM DY) USE_NL(C)*/
			MM.STR_CD
	       ,C.STR_NM
	       ,NVL(BUY_SALE_AMT,0) AS BUY_SALE_AMT  
	       ,NVL(RTN_SALE_AMT,0) AS RTN_SALE_AMT 
	       ,NVL(STRIO_SALE_AMT,0) AS STRIO_SALE_AMT 
	       ,NVL(SALE_PRC_UPDOWN_AMT,0) AS SALE_PRC_UPDOWN_AMT 
	       ,NVL(SALE_SALE_AMT,0) AS SALE_SALE_AMT    
	       ,NVL(BUY_QTY,0) AS BUY_QTY     
	       ,NVL(RTN_QTY,0) AS RTN_QTY       
	       ,NVL(STRIO_QTY,0) AS STRIO_QTY            
	       ,NVL(SALE_QTY,0) AS SALE_QTY              
	       ,NVL(STK_ADJ_SALE_AMT,0) AS STK_ADJ_SALE_AMT
	       ,NVL(STK_ADJ_QTY,0) AS STK_ADJ_QTY
	       ,NVL(BOOK_FWD_SALE,0) AS BOOK_FWD_SALE 
	       ,NVL(BOOK_FWD_QTY,0) AS BOOK_FWD_QTY 
	       
	FROM
	
		(SELECT 
			<isNotEmpty  property="storeVal" >
				<isNotEmpty  property="productVal" > 
					 /*+  index(TED_MM_FWD_STK TED_MM_FWD_STK_02) */			 
				</isNotEmpty>		 
			</isNotEmpty> 
			<isEmpty  property="productVal" >
				<isEmpty  property="storeVal" >
				  	/*+  index(TED_MM_FWD_STK IX_ED_MM_FWD_STK_01) */ 			 
				</isEmpty>
		   </isEmpty>	 
	       <isNotEmpty  property="productVal" >		 
			   	<isEmpty  property="storeVal" >
				 	/*+  index(TED_MM_FWD_STK TED_MM_FWD_STK_02) */ 			
	       		</isEmpty>			 
	       </isNotEmpty>		 
		   <isNotEmpty  property="storeVal" >
  		   		<isEmpty  property="productVal" >
			 		/*+  index(TED_MM_FWD_STK TED_MM_FWD_STK_03) */ 			
		   		</isEmpty>
         	</isNotEmpty>	
         	
				STR_CD
		       ,SUM(NVL(BOOK_FWD_SALE,0)) AS BOOK_FWD_SALE
		       ,SUM(NVL(BOOK_FWD_QTY,0)) AS BOOK_FWD_QTY		
		FROM  TED_MM_FWD_STK		
		WHERE STK_MM = #stk_mm#
	      <isNotEmpty  property="venCds"  prepend="AND"> 
	      <iterate prepend="VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
	        #venCds[]# 
	      </iterate> 
	    </isNotEmpty>		   
		   <isNotEmpty  property="entp_cd"  prepend="AND"> 
		    	VEN_CD = #entp_cd#
		   </isNotEmpty>		   
		   <isNotEmpty property="storeVal"  prepend="AND"> 
		      <iterate prepend="STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
		        #storeVal[]# 
		      </iterate> 
	   	  </isNotEmpty> 		   
		   <isNotEmpty  property="productVal"  prepend="AND"> 
		    	PROD_CD = #productVal#
	       </isNotEmpty> 		
		GROUP BY STR_CD
		) MM LEFT OUTER JOIN
		
		(
		SELECT	
		 <isNotEmpty  property="storeVal" >
				<isNotEmpty  property="productVal" > 
					 /*+  index(A IX_ED_DY_STK_05) */			 
				</isNotEmpty>		 
			</isNotEmpty> 
			<isEmpty  property="productVal" >
				<isEmpty  property="storeVal" >
				  	/*+  index(A IX_ED_DY_STK_03) */ 
				</isEmpty>
		   </isEmpty>	 
	       <isNotEmpty  property="productVal" >		 
			   	<isEmpty  property="storeVal" >
				 	/*+  index(A IX_ED_DY_STK_05) */ 
	       		</isEmpty>			 
	       </isNotEmpty>		 
		   <isNotEmpty  property="storeVal" >
  		   		<isEmpty  property="productVal" >
			 		/*+  index(A IX_ED_DY_STK_04) */ 
		   		</isEmpty>
         	</isNotEmpty>	           	
				A.STR_CD
		       ,SUM(NVL(BUY_SALE_AMT,0)) AS BUY_SALE_AMT
		       ,SUM(NVL(RTN_SALE_AMT,0)) AS RTN_SALE_AMT
		       ,SUM(NVL(STRI_SALE_AMT,0) - NVL(STRO_SALE_AMT,0)) AS STRIO_SALE_AMT
		       ,SUM(NVL(SALE_PRC_UP_AMT,0) - NVL(SALE_PRC_DOWN_AMT,0)) AS SALE_PRC_UPDOWN_AMT
		       ,SUM(NVL(SALE_SALE_AMT,0)) AS SALE_SALE_AMT
		       ,SUM(NVL(BUY_QTY,0)) AS BUY_QTY
		       ,SUM(NVL(RTN_QTY,0)) AS RTN_QTY
		       ,SUM(NVL(STRI_QTY,0) - NVL(STRO_QTY,0)) AS STRIO_QTY
		       ,SUM(NVL(SALE_QTY,0)) AS SALE_QTY
		       ,SUM(NVL(STK_ADJ_SALE_AMT,0)) AS STK_ADJ_SALE_AMT
		       ,SUM(NVL(STK_ADJ_QTY,0)) AS STK_ADJ_QTY		
		FROM  TED_DY_STK A 		
		WHERE A.STK_DY BETWEEN replace(#startDate#,'-','') and replace(#endDate#,'-','')
	       <isNotEmpty  property="venCds"  prepend="AND"> 
	      <iterate prepend="A.VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
	        #venCds[]# 
	      </iterate> 
	    </isNotEmpty>		   
		   <isNotEmpty  property="entp_cd"  prepend="AND"> 
		    	A.VEN_CD = #entp_cd#
		   </isNotEmpty>		   
		   <isNotEmpty property="storeVal"  prepend="AND"> 
		      <iterate prepend="A.STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
		        #storeVal[]# 
		      </iterate> 
	   	  </isNotEmpty> 		   
		   <isNotEmpty  property="productVal"  prepend="AND"> 
		    	A.PROD_CD = #productVal#
	       </isNotEmpty>   
		GROUP BY A.STR_CD
		) DY ON DY.STR_CD = MM.STR_CD		
		INNER JOIN STORE C ON MM.STR_CD = C.STR_CD	
	ORDER BY MM.STR_CD
</select>



 
<resultMap id="pedminv0000ProductMap"    class="pedminv0000">
	   		 <result property="srcmkCd"             column="SRCMK_CD" />       
          	 <result property="prodNm"             	column="PROD_NM" />        
          	 <result property="prodCd"             	column="PROD_CD" />        
          	 <result property="buySaleAmt"          column="BUY_SALE_AMT" />   
          	 <result property="rtnSaleAmt"          column="RTN_SALE_AMT" />   
          	 <result property="strioSaleAmt"        column="STRIO_SALE_AMT" /> 
          	 <result property="salePrcUpdownAmt"    column="SALE_PRC_UPDOWN_AMT" />
          	 <result property="saleSaleAmt"         column="SALE_SALE_AMT" />  
          	 <result property="buyQty"             	column="BUY_QTY" />        
          	 <result property="rtnQty"             	column="RTN_QTY" />        
          	 <result property="strioQty"            column="STRIO_QTY" />      
          	 <result property="saleQty"             column="SALE_QTY" />       
          	 <result property="stkAdjSaleAmt"       column="STK_ADJ_SALE_AMT" />
          	 <result property="stkAdjQty"           column="STK_ADJ_QTY" />    
          	 <result property="bookFwdSale"         column="BOOK_FWD_SALE" />  
          	 <result property="bookFwdQty"          column="BOOK_FWD_QTY" />   
</resultMap>

<!-- 현재고(상품) -->
<select id="TSC_PRODUCT-SELECT01" parameterClass="map" resultMap="pedminv0000ProductMap">
	/* PEDMINV0000.TSC_PRODUCT-SELECT01 */  
	SELECT	/*+ leading (MM DY) USE_HASH(MM DY) */
			MM.SRCMK_CD
	       ,MM.PROD_NM
	       ,MM.PROD_CD
	       ,NVL(BUY_SALE_AMT,0) AS BUY_SALE_AMT  
	       ,NVL(RTN_SALE_AMT,0) AS RTN_SALE_AMT  
	       ,NVL(STRIO_SALE_AMT,0) AS STRIO_SALE_AMT  
	       ,NVL(SALE_PRC_UPDOWN_AMT,0) AS SALE_PRC_UPDOWN_AMT 
	       ,NVL(SALE_SALE_AMT,0) AS SALE_SALE_AMT    
	       ,NVL(BUY_QTY,0) AS BUY_QTY      
	       ,NVL(RTN_QTY,0) AS RTN_QTY       
	       ,NVL(STRIO_QTY,0) AS STRIO_QTY            
	       ,NVL(SALE_QTY,0) AS SALE_QTY             
	       ,NVL(STK_ADJ_SALE_AMT,0) AS STK_ADJ_SALE_AMT
	       ,NVL(STK_ADJ_QTY,0) AS STK_ADJ_QTY
	       ,NVL(BOOK_FWD_SALE,0) AS BOOK_FWD_SALE  
	       ,NVL(BOOK_FWD_QTY,0) AS BOOK_FWD_QTY    
	
	FROM
	
		(SELECT 	
		 	 <isNotEmpty  property="storeVal" >
				<isNotEmpty  property="productVal" > 
					 /*+  index(A IX_ED_DY_STK_05) */			 
				</isNotEmpty>		 
			</isNotEmpty> 
			<isEmpty  property="productVal" >
				<isEmpty  property="storeVal" >
				  	/*+  index(A IX_ED_DY_STK_03) */ 
				</isEmpty>
		   </isEmpty>	 
	       <isNotEmpty  property="productVal" >		 
			   	<isEmpty  property="storeVal" >
				 	/*+  index(A IX_ED_DY_STK_05) */ 
	       		</isEmpty>			 
	       </isNotEmpty>		 
		   <isNotEmpty  property="storeVal" >
  		   		<isEmpty  property="productVal" >
			 		/*+  index(A IX_ED_DY_STK_04) */ 
		   		</isEmpty>
         	</isNotEmpty>	
				MAX(A.PROD_NM) AS PROD_NM
		       ,A.PROD_CD
		       ,SUM(NVL(A.BUY_SALE_AMT,0)) AS BUY_SALE_AMT
		       ,SUM(NVL(A.RTN_SALE_AMT,0)) AS RTN_SALE_AMT
		       ,SUM(NVL(A.STRI_SALE_AMT,0) - NVL(A.STRO_SALE_AMT,0)) AS STRIO_SALE_AMT
		       ,SUM(NVL(A.SALE_PRC_UP_AMT,0) - NVL(A.SALE_PRC_DOWN_AMT,0)) AS SALE_PRC_UPDOWN_AMT
		       ,SUM(NVL(A.SALE_SALE_AMT,0)) AS SALE_SALE_AMT
		       ,SUM(NVL(A.BUY_QTY,0)) AS BUY_QTY
		       ,SUM(NVL(A.RTN_QTY,0)) AS RTN_QTY
		       ,SUM(NVL(A.STRI_QTY,0) - NVL(A.STRO_QTY,0)) AS STRIO_QTY
		       ,SUM(NVL(A.SALE_QTY,0)) AS SALE_QTY
		       ,SUM(NVL(A.STK_ADJ_SALE_AMT,0)) AS STK_ADJ_SALE_AMT
		       ,SUM(NVL(A.STK_ADJ_QTY,0)) AS STK_ADJ_QTY		
		FROM  TED_DY_STK A		
		WHERE STK_DY BETWEEN replace(#startDate#,'-','') and replace(#endDate#,'-','')
	       <isNotEmpty  property="venCds"  prepend="AND"> 
	      <iterate prepend="A.VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
	        #venCds[]# 
	      </iterate> 
	    </isNotEmpty>		   
		   <isNotEmpty  property="entp_cd"  prepend="AND"> 
		    	A.VEN_CD = #entp_cd#
		   </isNotEmpty>		   
		   <isNotEmpty property="storeVal"  prepend="AND"> 
		      <iterate prepend="A.STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
		        #storeVal[]# 
		      </iterate> 
	    	</isNotEmpty> 		   
		   <isNotEmpty  property="productVal"  prepend="AND"> 
		    	A.PROD_CD = #productVal#
	       </isNotEmpty> 
		
		GROUP BY A.PROD_CD
		) DY RIGHT OUTER JOIN
		
		(SELECT 
		
		<isNotEmpty  property="storeVal" >
				<isNotEmpty  property="productVal" > 
					 /*+  index(TED_MM_FWD_STK TED_MM_FWD_STK_02) */		 		 
				</isNotEmpty>		 
			</isNotEmpty> 
			<isEmpty  property="productVal" >
				<isEmpty  property="storeVal" >
				  	/*+  index(TED_MM_FWD_STK IX_ED_MM_FWD_STK_01) */ 			
				</isEmpty>
		   </isEmpty>	 
	       <isNotEmpty  property="productVal" >		 
			   	<isEmpty  property="storeVal" >
				 	/*+  index(TED_MM_FWD_STK TED_MM_FWD_STK_02) */ 			
	       		</isEmpty>			 
	       </isNotEmpty>		 
		   <isNotEmpty  property="storeVal" >
  		   		<isEmpty  property="productVal" >
			 		/*+  index(TED_MM_FWD_STK TED_MM_FWD_STK_03) */ 			
		   		</isEmpty>
         	</isNotEmpty>	
				PROD_CD
		       ,SRCMK_CD
		       ,MAX(PROD_NM) AS PROD_NM
		       ,SUM(NVL(BOOK_FWD_SALE,0)) AS BOOK_FWD_SALE
		       ,SUM(NVL(BOOK_FWD_QTY,0)) AS BOOK_FWD_QTY		
		FROM  TED_MM_FWD_STK		
		WHERE STK_MM = #stk_mm#
	      <isNotEmpty  property="venCds"  prepend="AND"> 
	      <iterate prepend="VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
	        #venCds[]# 
	      </iterate> 
	    </isNotEmpty>		   
		   <isNotEmpty  property="entp_cd"  prepend="AND"> 
		    	VEN_CD = #entp_cd#
		   </isNotEmpty>		   
		   <isNotEmpty property="storeVal"  prepend="AND"> 
		      <iterate prepend="STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
		        #storeVal[]# 
		      </iterate> 
	   	  </isNotEmpty> 		   
		   <isNotEmpty  property="productVal"  prepend="AND"> 
		    	PROD_CD = #productVal#
	       </isNotEmpty> 		
		GROUP BY PROD_CD, SRCMK_CD, PROD_NM
		) MM ON DY.PROD_CD = MM.PROD_CD	

</select>


<resultMap id="pedminv0000ProductMap2"    class="pedminv0000">
			<result property="venCd"             column="VEN_CD" />       
          	 <result property="strCd"             	column="STR_CD" />        
          	 <result property="strNm"             	column="STR_NM" />	
	   		 <result property="srcmkCd"             column="SRCMK_CD" />       
          	 <result property="prodCd"             	column="PROD_CD" />        
          	 <result property="prodNm"             	column="PROD_NM" /> 
          	 <result property="bookFwdQty"          column="BOOK_FWD_QTY" />   
          	 <result property="buyQty"             	column="BUY_QTY" />        
          	 <result property="rtnQty"             	column="RTN_QTY" />        
          	 <result property="strioQty"            column="STRIO_QTY" />      
          	 <result property="saleQty"             column="SALE_QTY" />       
          	 <result property="bookFwdSale"         column="BOOK_FWD_SALE" />  
          	 <result property="buySaleAmt"          column="BUY_SALE_AMT" />   
          	 <result property="rtnSaleAmt"          column="RTN_SALE_AMT" />   
          	 <result property="strioSaleAmt"        column="STRIO_SALE_AMT" /> 
          	 <result property="salePrcUpdownAmt"    column="SALE_PRC_UPDOWN_AMT" />
          	 <result property="saleSaleAmt"         column="SALE_SALE_AMT" />  
          	 <result property="stkAdjQty"           column="STK_ADJ_QTY" />    
          	 <result property="stkAdjSaleAmt"       column="STK_ADJ_SALE_AMT" />
</resultMap>

<!-- 현재고(상품) 텍스트 -->
<select id="TSC_PRODUCT-SELECT02" parameterClass="map" resultMap="pedminv0000ProductMap2">
	 /* PEDMINV0000.selectProductInfoText */
	SELECT   /*+use_nl(BB)*/
			AA.VEN_CD, 
			AA.STR_CD, 
			BB.STR_NM,
			AA.SRCMK_CD,   
			AA.PROD_CD,  
			AA.PROD_NM, 
			AA.BOOK_FWD_QTY, 
			AA.BUY_QTY,   
			AA.RTN_QTY, 
			AA.STRIO_QTY,   
			AA.SALE_QTY,   
			AA.BOOK_FWD_SALE,    
			AA.BUY_SALE_AMT, 
			AA.RTN_SALE_AMT,  
			AA.STRIO_SALE_AMT,    
			AA.SALE_PRC_UPDOWN_AMT,   
			AA.SALE_SALE_AMT,  
			AA.STK_ADJ_QTY, 
			AA.STK_ADJ_SALE_AMT   
			
	FROM 	
		 (
		  SELECT /*+NO_MERGE LEADING(B A) USE_HASH(A B)  */
		  		 A.VEN_CD,
				 A.STR_CD, 
				 A.SRCMK_CD,
				 A.PROD_CD,
				 MAX(A.PROD_NM) AS PROD_NM ,  
				 SUM(NVL(A.BOOK_FWD_QTY,0)) BOOK_FWD_QTY, 
				 SUM(NVL(B.BUY_QTY,0)) BUY_QTY,  
				 SUM(NVL(B.RTN_QTY,0)) RTN_QTY, 
				 SUM(NVL(B.STRI_QTY,0) - NVL(B.STRO_QTY,0)) STRIO_QTY,  
				 SUM(NVL(B.SALE_QTY,0)) SALE_QTY,  
				 SUM(NVL(A.BOOK_FWD_SALE,0)) BOOK_FWD_SALE,  
				 SUM(NVL(B.BUY_SALE_AMT,0)) BUY_SALE_AMT, 
				 SUM(NVL(B.RTN_SALE_AMT,0)) RTN_SALE_AMT, 
				 SUM(NVL(B.STRI_SALE_AMT,0)-NVL(B.STRO_SALE_AMT,0)) STRIO_SALE_AMT,  
				 SUM(NVL(B.SALE_PRC_UP_AMT,0)-NVL(B.SALE_PRC_DOWN_AMT,0)) SALE_PRC_UPDOWN_AMT, 
				 SUM(NVL(B.SALE_SALE_AMT,0)) SALE_SALE_AMT, 
				 SUM(NVL(B.STK_ADJ_QTY,0)) STK_ADJ_QTY,  
				 SUM(NVL(B.STK_ADJ_SALE_AMT,0)) STK_ADJ_SALE_AMT
				 
		    FROM 
		       (
			    SELECT 
			    
			 <isNotEmpty  property="storeVal" >
				<isNotEmpty  property="productVal" > 
					 /*+NO_MERGE  index(A TED_MM_FWD_STK_02) */	           	 
				</isNotEmpty>		 
			</isNotEmpty> 
			<isEmpty  property="productVal" >
				<isEmpty  property="storeVal" >
				  	/*+NO_MERGE  index(A IX_ED_MM_FWD_STK_01) */              
				</isEmpty>
		   </isEmpty>	 
	       <isNotEmpty  property="productVal" >		 
			   	<isEmpty  property="storeVal" >
				 	/*+NO_MERGE  index(A TED_MM_FWD_STK_02) */ 				
	       		</isEmpty>			 
	       </isNotEmpty>		 
		   <isNotEmpty  property="storeVal" >
  		   		<isEmpty  property="productVal" >
			 		/*+NO_MERGE  index(A TED_MM_FWD_STK_03) */ 				
		   		</isEmpty>
         	</isNotEmpty>	 
			    	   VEN_CD,
					   STR_CD,
					   PROD_CD,
					   SRCMK_CD,
					   PROD_NM,
					   SUM(NVL(BOOK_FWD_SALE,0)) BOOK_FWD_SALE ,
					   SUM(NVL(BOOK_FWD_QTY,0)) BOOK_FWD_QTY 			
			    FROM   TED_MM_FWD_STK A			    
				WHERE STK_MM = #stk_mm#				
					<isNotEmpty  property="venCds"  prepend="AND"> 
				      <iterate prepend="VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
				        #venCds[]# 
				      </iterate> 
				    </isNotEmpty>				   
				   <isNotEmpty  property="entp_cd"  prepend="AND"> 
				    	VEN_CD = #entp_cd#
				   </isNotEmpty>				   
				   <isNotEmpty  property="productVal"  prepend="AND"> 
				    	PROD_CD = #productVal#
			       </isNotEmpty> 
			       <isNotEmpty property="storeVal"  prepend="AND"> 
					      <iterate prepend="STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
					        #storeVal[]# 
					      </iterate> 
				    </isNotEmpty> 			       
			
			    GROUP BY VEN_CD, STR_CD, PROD_CD, SRCMK_CD, PROD_NM ) A LEFT OUTER JOIN 
			    
			    ( 
				  SELECT /*+NO_MERGE */
				  		 VEN_CD,
				       	 STR_CD ,
						 PROD_CD , 
						 SUM(NVL(RTN_QTY,0)) RTN_QTY,
						 SUM(NVL(STRI_SALE_AMT,0)) STRI_SALE_AMT,
						 SUM(NVL(STRO_SALE_AMT,0)) STRO_SALE_AMT , 
						 SUM(NVL(RTN_SALE_AMT,0)) RTN_SALE_AMT, 
						 SUM(NVL(SALE_SALE_AMT,0)) SALE_SALE_AMT ,
						 SUM(NVL(SALE_PRC_UP_AMT,0)) SALE_PRC_UP_AMT , 
						 SUM(NVL(SALE_PRC_DOWN_AMT,0)) SALE_PRC_DOWN_AMT ,
					 	 SUM(NVL(STRI_QTY,0)) STRI_QTY,
						 SUM(NVL(STRO_QTY,0)) STRO_QTY, 
						 SUM(NVL(BUY_QTY,0)) AS BUY_QTY,
						 SUM(NVL(SALE_QTY,0)) AS SALE_QTY,
						 SUM(NVL(STK_ADJ_QTY,0)) STK_ADJ_QTY, 
						 SUM(NVL(STK_ADJ_SALE_AMT,0)) STK_ADJ_SALE_AMT,
						 SUM(NVL(BUY_SALE_AMT,0)) BUY_SALE_AMT 				
				 FROM 	 TED_DY_STK A				 
				 WHERE STK_DY BETWEEN replace(#startDate#,'-','') and replace(#endDate#,'-','')
				 
			 	   <isNotEmpty  property="venCds"  prepend="AND"> 
				      <iterate prepend="VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
				        #venCds[]# 
				      </iterate> 
				    </isNotEmpty>				   
				   <isNotEmpty  property="entp_cd"  prepend="AND"> 
				    	VEN_CD = #entp_cd#
				   </isNotEmpty>				   
				   <isNotEmpty  property="productVal"  prepend="AND"> 
				    	PROD_CD = #productVal#
			       </isNotEmpty> 
			       <isNotEmpty property="storeVal"  prepend="AND"> 
					      <iterate prepend="STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
					        #storeVal[]# 
					      </iterate> 
				    </isNotEmpty> 				
				 GROUP BY VEN_CD, STR_CD, PROD_CD  ) B ON  A.VEN_CD = B.VEN_CD				 
		   AND A.STR_CD = B.STR_CD
		   AND A.PROD_CD = B.PROD_CD 
		
		
		
		 <!--    
		 		  <isNotEmpty  property="venCds"  prepend="AND"> 
				      <iterate prepend="A.VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
				        #venCds[]# 
				      </iterate> 
				    </isNotEmpty>
			-->	   
				   <isNotEmpty  property="entp_cd"  prepend="AND"> 
				    	A.VEN_CD = #entp_cd#
				   </isNotEmpty>
				   
				   <isNotEmpty  property="productVal"  prepend="AND"> 
				    	A.PROD_CD = #productVal#
			       </isNotEmpty> 
			       <isNotEmpty property="storeVal"  prepend="AND"> 
					      <iterate prepend="A.STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
					        #storeVal[]# 
					      </iterate> 
				    </isNotEmpty> 		
		   GROUP BY A.VEN_CD, A.STR_CD, A.PROD_CD, A.SRCMK_CD, B.SALE_QTY    ) AA ,STORE BB 		   		 
		   WHERE AA.STR_CD=BB.STR_CD	 
				 
</select>

 
<resultMap id="pedminv0000StoreMap2"    class="pedminv0000">
	   <result property="stroDy"			column="STRO_DY" />          
       <result property="ctrCd"             column="CTR_CD" />           
       <result property="ctrNm"             column="CTR_NM" />           
       <result property="strCd"             column="STR_CD" />           
       <result property="strNm"             column="STR_NM" />           
       <result property="stroQty"           column="STRO_QTY" />         
       <result property="stroSaleAmt"       column="STRO_SALE_AMT" />    
       <result property="striQty"           column="STRI_QTY" />         
       <result property="striSaleAmt"       column="STRI_SALE_AMT" />    
       <result property="strioQty"          column="STRIO_QTY" />        
       <result property="strioSaleAmt"      column="STRIO_SALE_AMT" /> 
</resultMap>


<!-- 센터 점출입 -->
<select id="TSC_CENTER_STORE-SELECT01" parameterClass="map" resultMap="pedminv0000StoreMap2">
	SELECT	TO_CHAR(TO_DATE(STRO_DY,'yyyymmdd'),'YYYY-MM-DD') STRO_DY
	       ,CTR_CD
	       ,CTR_NM
	       ,STR_CD
	       ,STR_NM
	       ,SUM(STRO_QTY) AS STRO_QTY
	       ,SUM(STRO_SALE_AMT) AS STRO_SALE_AMT
	       ,SUM(STRI_QTY) AS STRI_QTY
	       ,SUM(STRI_SALE_AMT) AS STRI_SALE_AMT
	       ,SUM(STRO_QTY) - SUM(STRI_QTY) AS  STRIO_QTY
	       ,SUM(STRO_SALE_AMT) - SUM(STRI_SALE_AMT) AS  STRIO_SALE_AMT
	
	FROM 
	
	(
	SELECT   B.STRO_DY,
             A.CTR_CD,
             NVL (C.STR_NM, 'no code') AS CTR_NM,
             B.STR_CD,
             NVL (E.STR_NM, 'no code') AS STR_NM,
             B.VEN_CD,
             B.PROD_CD,
             B.SRCMK_CD,
             B.PROD_NM,
             CASE A.STRIO_FG
                 WHEN '1'
                 THEN
                    SUM(B.STRI_QTY
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRI_QTY,
             CASE A.STRIO_FG
                 WHEN '1'
                 THEN
                    SUM(B.STRI_BUY_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRI_BUY_AMT,
             CASE A.STRIO_FG
                 WHEN '1'
                 THEN
                    SUM(B.STRI_SALE_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRI_SALE_AMT,
             CASE A.STRIO_FG
                 WHEN '2'
                 THEN
                    SUM(B.STRI_QTY
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 WHEN '4'
                 THEN
                    SUM(B.STRI_QTY
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRO_QTY                                    
                            ,
             CASE A.STRIO_FG
                 WHEN '2'
                 THEN
                    SUM(B.STRI_BUY_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 WHEN '4'
                 THEN
                    SUM(B.STRI_BUY_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 ELSE
                    0
             END
                 AS STRO_BUY_AMT,
             CASE A.STRIO_FG
                 WHEN '2'
                 THEN
                    SUM(B.STRI_SALE_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 WHEN '4'
                 THEN
                    SUM(B.STRI_SALE_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 ELSE
                    0
              END
                 AS STRO_SALE_AMT
       FROM         TED_LOGI_STRIO A INNER JOIN  TED_LOGI_STRIO_PROD B 
       									     ON  A.STRIO_SLIP_NO = B.STRIO_SLIP_NO
                                            AND A.STR_CD = B.STR_CD
                                     LEFT OUTER JOIN  STORE@dl_md_martnis C 
                                             ON A.CTR_CD = C.STR_CD  
              						 LEFT OUTER JOIN STORE@dl_md_martnis E 
              						         ON B.STR_CD = E.STR_CD  
              						         
              						         
       WHERE B.STRO_DY BETWEEN replace(#startDate#,'-','') and replace(#endDate#,'-','')       
	       <isNotEmpty  property="venCds"  prepend="AND"> 
		      <iterate prepend="B.VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
		        #venCds[]# 
		      </iterate	> 
		   </isNotEmpty>
		   
		   <isNotEmpty  property="entp_cd"  prepend="AND"> 
		    	B.VEN_CD = #entp_cd#
		   </isNotEmpty>
		   
		   <isNotEmpty property="storeVal"  prepend="AND"> 
		      <iterate prepend="B.STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
		        #storeVal[]# 
		      </iterate> 
	   	  </isNotEmpty> 
		   
		  <isNotEmpty  property="productVal"  prepend="AND"> 
		    	B.PROD_CD = #productVal#
	      </isNotEmpty> 
       
	   GROUP BY   B.STRO_DY,
	              A.CTR_CD,
	              C.STR_NM,
	              E.STR_NM,
	              B.STR_CD,
	              B.VEN_CD,
	              B.PROD_CD,
	              B.SRCMK_CD,
	              B.PROD_NM,
	              A.STRIO_FG
	)
	
	
	GROUP BY STRO_DY, CTR_CD, CTR_NM, STR_CD, STR_NM
	ORDER BY CTR_CD
</select>


<resultMap id="pedminv0000StoreDetailMap"    class="pedminv0000">
 		 <result property="srcmkCd"			    	   column="SRCMK_CD" />                
         <result property="prodCd"            	       column="PROD_CD" />       
         <result property="prodNm"            	       column="PROD_NM" />       
         <result property="ctrCd"             	       column="CTR_CD" />        
         <result property="ctrNm"             	       column="CTR_NM" />        
         <result property="strCd"             	       column="STR_CD" />        
         <result property="strNm"             	       column="STR_NM" />        
         <result property="stroQty"           	       column="STRO_QTY" />      
         <result property="stroSaleAmt"       	       column="STRO_SALE_AMT" /> 
         <result property="striQty"           	       column="STRI_QTY" />      
         <result property="striSaleAmt"       	       column="STRI_SALE_AMT" /> 
         <result property="strioQty"          	       column="STRIO_QTY" />     
         <result property="strioSaleAmt"      	       column="STRIO_SALE_AMT" /> 
</resultMap>         
<!-- 센터 점출입 상세 -->
<select id="TSC_CENTER_STORE_DETAIL-SELECT01" parameterClass="map" resultMap="pedminv0000StoreDetailMap">

		/*PEDMINV0000.TSC_CENTER_STORE_DETAIL-SELECT01*/
	SELECT	SRCMK_CD
	       ,PROD_CD
	       ,MAX(PROD_NM) AS PROD_NM
	       ,CTR_CD
	       ,CTR_NM
	       ,STR_CD
	       ,STR_NM
	       ,SUM(STRO_QTY) AS STRO_QTY
	       ,SUM(STRO_SALE_AMT) AS STRO_SALE_AMT
	       ,SUM(STRI_QTY) AS STRI_QTY
	       ,SUM(STRI_SALE_AMT) AS STRI_SALE_AMT
	       ,SUM(STRO_QTY) - SUM(STRI_QTY) AS  STRIO_QTY
	       ,SUM(STRO_SALE_AMT) - SUM(STRI_SALE_AMT) AS  STRIO_SALE_AMT
	
	FROM
	
	(
	SELECT   B.STRO_DY,
             A.CTR_CD,
             NVL (C.STR_NM, 'no code') AS CTR_NM,
             B.STR_CD,
             NVL (E.STR_NM, 'no code') AS STR_NM,
             B.VEN_CD,
             B.PROD_CD,
             B.SRCMK_CD,
             B.PROD_NM,
             CASE A.STRIO_FG
                 WHEN '1'
                 THEN
                    SUM(B.STRI_QTY
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRI_QTY,
             CASE A.STRIO_FG
                 WHEN '1'
                 THEN
                    SUM(B.STRI_BUY_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRI_BUY_AMT,
             CASE A.STRIO_FG
                 WHEN '1'
                 THEN
                    SUM(B.STRI_SALE_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRI_SALE_AMT,
             CASE A.STRIO_FG
                 WHEN '2'
                 THEN
                    SUM(B.STRI_QTY
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 WHEN '4'
                 THEN
                    SUM(B.STRI_QTY
                        * (CASE B.ADJ_FG WHEN '1' THEN '1' ELSE '-1' END))
                 ELSE
                    0
             END
                 AS STRO_QTY                                    
                            ,
             CASE A.STRIO_FG
                 WHEN '2'
                 THEN
                    SUM(B.STRI_BUY_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 WHEN '4'
                 THEN
                    SUM(B.STRI_BUY_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 ELSE
                    0
             END
                 AS STRO_BUY_AMT,
             CASE A.STRIO_FG
                 WHEN '2'
                 THEN
                    SUM(B.STRI_SALE_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 WHEN '4'
                 THEN
                    SUM(B.STRI_SALE_AMT
                        * (CASE B.ADJ_FG WHEN '1' THEN 1 ELSE -1 END))
                 ELSE
                    0
              END
                 AS STRO_SALE_AMT
       FROM         TED_LOGI_STRIO A INNER JOIN  TED_LOGI_STRIO_PROD B 
       									     ON  A.STRIO_SLIP_NO = B.STRIO_SLIP_NO
                                            AND A.STR_CD = B.STR_CD
                                     LEFT OUTER JOIN  STORE@dl_md_martnis C 
                                             ON A.CTR_CD = C.STR_CD  
              						 LEFT OUTER JOIN STORE@dl_md_martnis E 
              						         ON B.STR_CD = E.STR_CD  
              						         
              						         
       WHERE B.STRO_DY BETWEEN replace(#startDate#,'-','') and replace(#endDate#,'-','')
       
	       <isNotEmpty  property="venCds"  prepend="AND"> 
		      <iterate prepend="B.VEN_CD IN " property="venCds" open="(" close=")" conjunction=","> 
		        #venCds[]# 
		      </iterate	> 
		   </isNotEmpty>
		   
		   <isNotEmpty  property="entp_cd"  prepend="AND"> 
		    	B.VEN_CD = #entp_cd#
		   </isNotEmpty>
		   
		   <isNotEmpty property="storeVal"  prepend="AND"> 
		      <iterate prepend="B.STR_CD IN " property="storeVal" open="(" close=")" conjunction=","> 
		        #storeVal[]# 
		      </iterate> 
	   	  </isNotEmpty> 
		   
		  <isNotEmpty  property="productVal"  prepend="AND"> 
		    	B.PROD_CD = #productVal#
	      </isNotEmpty> 
       
	   GROUP BY   B.STRO_DY,
	              A.CTR_CD,
	              C.STR_NM,
	              E.STR_NM,
	              B.STR_CD,
	              B.VEN_CD,
	              B.PROD_CD,
	              B.SRCMK_CD,
	              B.PROD_NM,
	              A.STRIO_FG
	)
	
	
	GROUP BY PROD_CD, SRCMK_CD, CTR_CD, CTR_CD, CTR_NM, STR_CD, STR_NM
	ORDER BY PROD_CD, CTR_CD, CTR_NM, STR_CD, STR_NM
</select>

</sqlMap>
